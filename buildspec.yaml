version: 0.2
env:
  shell: bash
phases:
  pre_build:
    commands:
      - >
        run_task_response=$(aws ecs run-task --cluster dev-sato-cdk-practice-app-cluster
        --task-definition arn:aws:ecs:ap-northeast-1:381716011867:task-definition/dev-sato-cdk-practice-app-task-def:14
        --network-configuration "awsvpcConfiguration={subnets=['subnet-07af51797366f0f72'],securityGroups=['sg-0334a8ad0486657ae'],assignPublicIp='DISABLED'}"
        --launch-type FARGATE)
      - taskArn=$(echo $run_task_response | jq -r '.tasks[0].taskArn')
      - aws ecs wait tasks-stopped --cluster dev-sato-cdk-practice-app-cluster --tasks ${taskArn}
      - describe_task=$(aws ecs describe-tasks --cluster dev-sato-cdk-practice-app-cluster --tasks ${taskArn})
      - stopCode=$(echo $x | jq -r '.tasks[0].stopCode')
      - exitCode=$(echo $x | jq -r '.tasks[0].containers[0].exitCode')
      - |
        if [[ stopCode != 'EssentialContainerExited' && exitCode != 0 ]]; then
          exit 1
        fi
      - exit 1
      - codebuild-breakpoint # debug flag using session manager
      - echo Logging in to Amazon ECR...
      - REPOSITORY_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | tr -dc 'a-zA-Z0-9' | cut -c 1-7)
  build:
    commands:
      - echo Building the Docker image...
      - docker compose build dev-deploy
      - docker tag dev-sato-app-deploy:latest ${REPOSITORY_URI}:${IMAGE_TAG}
      - docker tag dev-sato-app-deploy:latest ${REPOSITORY_URI}:latest
      - docker push ${REPOSITORY_URI}:${IMAGE_TAG}
      - docker push ${REPOSITORY_URI}:latest
  post_build:
    commands:
      - echo "[{\"name\":\"${APP_NAME}\",\"imageUri\":\"${REPOSITORY_URI}:${IMAGE_TAG}\"}]" > app.json
artifacts:
  files:
    - app.json